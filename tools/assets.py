import os
import shutil
import re
import sys
from tqdm import tqdm
import hashlib
from pathlib import Path

ALL_ASSETS = {}

def find_git_root():
    current_dir = Path(__file__).resolve().parent
    while current_dir != current_dir.parent:
        if (current_dir / ".git").exists():
            return current_dir
        current_dir = current_dir.parent
    raise RuntimeError("Git root not found.")

def clean_directory(directory):
    if os.path.exists(directory):
        shutil.rmtree(directory)
    os.makedirs(directory, exist_ok=True)
    return directory

def ensure_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)
    return directory    

def to_correct_case(any_case_with_special_chars):
    any_case_with_special_chars = re.sub(r'[^a-zA-Z0-9]', '_', any_case_with_special_chars)
    any_case_with_special_chars = any_case_with_special_chars.strip('_')
    any_case_with_special_chars = re.sub(r'^[0-9]+', '', any_case_with_special_chars)
    any_case_with_special_chars = any_case_with_special_chars.strip('_')
    return any_case_with_special_chars


def get_asset_type(file_path):
    if file_path.endswith(('.png', '.jpg', '.jpeg', '.gif')):
        return 'image'
    elif file_path.endswith(('.ttf', '.otf')):
        return 'font'
    elif file_path.endswith(('.mp3', '.wav', '.ogg')):
        return 'audio'
    elif file_path.endswith(('.mp4', '.avi', '.mov')):
        return 'video'
    else:
        return None

def generate_c_code_for_bytes(data, name):
    lines = [f'static const uint8_t {name}[] = {{']
    for i in range(0, len(data), 32):
        line = '    ' + ', '.join(f'0x{byte:02x}' for byte in data[i:i+32])
        if i + 32 < len(data):
            line += ','
        lines.append(line)

    lines.append('};')

    return '\n'.join(lines)

def create_image_asset(file_path, output_dir):
    print(f"Generating image asset for {file_path} in {output_dir}")

    image_bytes = open(file_path, "rb").read()
    image_hash = hashlib.sha256(image_bytes).hexdigest()
    base_name_without_ext = os.path.splitext(os.path.basename(file_path))[0]
    image_name = to_correct_case(base_name_without_ext)

    # files to generate: 
    # output_dir/include/ps_asset_image_<image_name>_<hash>.h # a forward declaration of a function to return the image data as ptr to a static byte array    
    # output_dir/src/ps_asset_image_<image_name>_<hash>.c # the implementation  with the static byte array
    # check if a old version of the file exists and remove it (can be different hash)
    all_files = os.listdir(output_dir + "/include") + os.listdir(output_dir + "/src")

    # If the files already exists with same hash, skip
    header_exists = any(f"ps_asset_image_{image_name}_{image_hash}" in file for file in all_files if file.endswith(".h"))
    source_exists = any(f"ps_asset_image_{image_name}_{image_hash}" in file for file in all_files if file.endswith(".c"))
    if header_exists and source_exists:
        print(f"Asset {image_name} already exists with same hash, skipping generation.")
        return
    
    for file in all_files:
        if file.startswith(f"ps_asset_image_{image_name}_") and file.endswith(".h"):
            os.remove(os.path.join(output_dir, "include", file))
        if file.startswith(f"ps_asset_image_{image_name}_") and file.endswith(".c"):
            os.remove(os.path.join(output_dir, "src", file))

    # generate the header file
    header_source = [
        f"#ifndef PS_ASSET_IMAGE_{image_hash.upper()}_H",
        f"#define PS_ASSET_IMAGE_{image_hash.upper()}_H",
        f"\n",
        f"// This file is auto-generated by the asset generator script.",
        f"// Do not edit this file directly.",
        f"\n",
        f"// Asset Type: \"image\"",
        f"// Asset Path: {file_path}",
        f"// Hash: {image_hash}",
        f"// Name: {image_name}",
        f"\n", 
        f"#include <stdint.h>",
        f"#include <stddef.h>",
        f"\n",
        f"const uint8_t* psAssetImage_{image_name}(size_t* size);",
        f"\n",
        f"#endif // PS_ASSET_IMAGE_{image_hash.upper()}_H"
    ]

    header_file_path = os.path.join(output_dir, "include", f"ps_asset_image_{image_name}_{image_hash}.h")
    with open(header_file_path, "w") as header_file:
        header_file.write("\n".join(header_source))

    # generate the source file
    source_source = [
        f"#include \"ps_asset_image_{image_name}_{image_hash}.h\"",
        f"\n",
        f"// This file is auto-generated by the asset generator script.",
        f"// Do not edit this file directly.",
        f"\n",
        f"// Asset Type: \"image\"",
        f"// Asset Path: {file_path}",
        f"// Hash: {image_hash}",
        f"// Name: {image_name}",
        f"\n", 
        generate_c_code_for_bytes(image_bytes, f"__psAssetImage__{image_name}_{image_hash}"),
        f"\n",
        f"const uint8_t* psAssetImage_{image_name}(size_t* size) {{",
        f"    if (size != NULL) {{",
        f"        *size = sizeof(__psAssetImage__{image_name}_{image_hash});",
        f"    }}",
        f"   return &__psAssetImage__{image_name}_{image_hash}[0];",
        f"}};",
        f"\n"
    ]

    source_file_path = os.path.join(output_dir, "src", f"ps_asset_image_{image_name}_{image_hash}.c")
    with open(source_file_path, "w") as source_file:
        source_file.write("\n".join(source_source))
        source_file.write("\n")
    print(f"Generated image asset: {header_file_path}")

def create_image_assets_common_header(output_dir):
    all_image_headers = os.listdir(output_dir + "/include")
    all_image_headers = [f for f in all_image_headers if f.endswith(".h") and f.startswith("ps_asset_image_")]
    all_image_names = [f.split("_")[3] for f in all_image_headers]

    common_header_source = [
        f"#ifndef PS_ASSET_IMAGE_COMMON_H",
        f"#define PS_ASSET_IMAGE_COMMON_H",
        f"\n",
        f"// This file is auto-generated by the asset generator script.",
        f"// Do not edit this file directly.",
        f"\n",
        f"#include <stdint.h>",
        f"#include <string.h>",
        f"#include <stddef.h>",
        f"\n"
        f"// Asset Type: \"image\"",
        f"\n",
        *[f"#include \"{header}\"" for header in all_image_headers],
        "\n",
        "const uint8_t* psAssetImage(const char* name, size_t* size); \n",
        f"#endif // PS_ASSET_IMAGE_COMMON_H"
    ]

    common_header_file_path = os.path.join(output_dir, "include", "ps_asset_image.h")
    with open(common_header_file_path, "w") as common_header_file:
        common_header_file.write("\n".join(common_header_source))
        common_header_file.write("\n")

    source_source = [
        f"#include \"ps_asset_image.h\"",
        f"\n",
        f"#include <stdio.h>",
        f"#include <string.h>",
        f"\n",
        f"// This file is auto-generated by the asset generator script.",
        f"// Do not edit this file directly.",
        f"\n",
        f"// Asset Type: \"image\"",
        f"\n",
        f"const uint8_t* psAssetImage(const char* name, size_t* size) {{",
        f"    if (size != NULL) {{",
        f"        *size = 0;",
        f"    }}",
        f"    if (name == NULL) return NULL;",
        f"    if (strcmp(name, \"\") == 0) return NULL;",
        *[f"    if (strcmp(name, \"{image_name}\") == 0) return psAssetImage_{image_name}(size);" for image_name in all_image_names],
        f"    printf(\"Error: Image asset \\\"%s\\\" not found.\\n\", name);",
        f"    return NULL;",
        f"}}",
        f"\n",
    ]
    source_file_path = os.path.join(output_dir, "src", "ps_asset_image.c")
    with open(source_file_path, "w") as source_file:
        source_file.write("\n".join(source_source))
        source_file.write("\n")

    print(f"Generated common header file: {common_header_file_path}")

def create_image_assets(git_root, output_dir):
    asset_dir = os.path.join(git_root, "assets")
    # get all asset files that return "image" from get_asset_type inside the asset dir recursively
    all_asset_files = []
    for root, _, files in os.walk(asset_dir):
        for file in files:
            file_path = os.path.join(root, file)
            asset_type = get_asset_type(file_path)
            if asset_type == "image":
                all_asset_files.append(file_path)
    print(f"Found {len(all_asset_files)} image assets to generate.")
    
    for file_path in all_asset_files:
        create_image_asset(file_path, output_dir)

    create_image_assets_common_header(output_dir)


def create_assets_common_header(output_dir):
    common_header_source = [
        f"#ifndef PS_ASSET_COMMON_H",
        f"#define PS_ASSET_COMMON_H",
        f"\n",
        f"// This file is auto-generated by the asset generator script.",
        f"// Do not edit this file directly.",
        f"\n",
        f"#include \"ps_asset_image.h\"",
        f"\n",
        f"#endif // PS_ASSET_COMMON_H"
    ]

    common_header_file_path = os.path.join(output_dir, "include", "ps_asset.h")
    with open(common_header_file_path, "w") as common_header_file:
        common_header_file.write("\n".join(common_header_source))
        common_header_file.write("\n")
    print(f"Generated common header file: {common_header_file_path}")

def main():
    git_root = find_git_root()
    temp_dir = os.path.join(git_root, "temp")
    bins_dir = os.path.join(git_root, "bins")
    clean_directory(temp_dir)
    ensure_directory(bins_dir)
    
    output_dir = os.path.join(git_root, "ps_assets", "generated")
    ensure_directory(output_dir)
    ensure_directory(output_dir + "/include")
    ensure_directory(output_dir + "/src")   

    create_image_assets(git_root, output_dir)
    create_assets_common_header(output_dir)

if __name__ == "__main__":
    main()
    
    
    

    